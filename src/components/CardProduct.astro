---
import { Product } from '@src/types'
import ImageSkeleton from './ImageSkeleton.svelte'

interface Props {
  data: Product
}

const { data } = Astro.props
---

<a class='cardProduct animate-slide-left' href={`/productos/${decodeURI(data.name)}`}>
  <div
    class={`flex flex-col w-52   items-center gap-5 px-3 py-3 shadow-md rounded-lg 
  hover:shadow-2xl hover:scale-110 transform  duration-150 border  lg:w-80
h-full `}
  >
    <ImageSkeleton
      client:load
      loading='lazy'
      width='100'
      height='100'
      class='object-cover'
      src={data.url}
      alt={data.name}
    />
    <span class='text-center capitalize text-sm lg:text-base font-light'>{data.name}</span>
  </div>
</a>

<script>
  // Función para animar el elemento cuando esté en el campo de visión
  function animateOnView(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        // Agregar la clase animate-fade-up al elemento cuando esté en el campo de visión
        entry.target.classList.add('animate-fade-right')
        // Dejar de observar el elemento una vez que se ha animado
        observer.unobserve(entry.target)
      }
    })
  }

  // Crear un observador de intersección
  const observer = new IntersectionObserver(animateOnView, {
    root: null, // El elemento raíz utilizado como viewport
    threshold: 0.5, // Umbral de visibilidad para activar la animación (en este caso, cuando el 50% del elemento es visible)
  })

  // Obtener todos los elementos que se deben observar
  const articles = document.querySelectorAll('.cardProduct')

  // Observar cada elemento
  articles.forEach((article) => {
    observer.observe(article)
  })
</script>

<style>
  .animate-slide-left {
    opacity: 0;
    transform: translateX(-100px);
    transition-property: opacity, transform;
    transition-duration: 0.3s;
    transition-timing-function: ease-in-out;
    transition-delay: 0.4s; /* Ajusta el valor del retraso según tus necesidades */
  }
</style>
