---
interface Reviews {
  name: string
  comment: string
  src: string
}

interface Props {
  opinion: Reviews
  indice: number
}
const { opinion, indice } = Astro.props
---

<article
  class={` animate-fade-up-delayed max-w-md bg-white relative px-8 py-5 flex flex-col gap-5 items-start drop-shadow-lg ${
    indice > 0 && indice < 2 && 'lg:ml-48'
  }  ${indice === 2 && 'lg:ml-16'}  hover:shadow-2xl transition-all duration-150 rounded-lg `}
>
  <img
    loading='lazy'
    class='absolute top-0 left-0'
    width='30'
    height='20'
    src='./icons/quote.png'
    alt='dos comillas negras de comentarios'
  />
  <section class='flex justify-end items-center gap-3'>
    <p class='font-light text-xs'>{opinion.comment}</p>
    <div class='rounded-full'>
      <img loading='lazy' width='100' height='100' src={opinion.src} alt={opinion.comment} />
    </div>
  </section>
  <span class='font-bold'>{opinion.name}</span>
</article>

<script>
  // Función para animar el elemento cuando esté en el campo de visión
  function animateOnView(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        // Agregar la clase animate-fade-up al elemento cuando esté en el campo de visión
        entry.target.classList.add('animate-fade-up')
        // Dejar de observar el elemento una vez que se ha animado
        observer.unobserve(entry.target)
      }
    })
  }

  // Crear un observador de intersección
  const observer = new IntersectionObserver(animateOnView, {
    root: null, // El elemento raíz utilizado como viewport
    threshold: 0.5, // Umbral de visibilidad para activar la animación (en este caso, cuando el 50% del elemento es visible)
  })

  // Obtener todos los elementos que se deben observar
  const articles = document.querySelectorAll('article')

  // Observar cada elemento
  articles.forEach((article) => {
    observer.observe(article)
  })
</script>

<style>
  .animate-fade-up-delayed {
    opacity: 0;
    transform: translateY(20px);
    transition-property: opacity, transform;
    transition-duration: 0.3s;
    transition-timing-function: ease-in-out;
    transition-delay: 0.2s; /* Ajusta el valor del retraso según tus necesidades */
  }
</style>
